
%% Object logic connectives
Type ljatom olatm -> olfm.
Type ljand  olfm -> olfm -> olfm.
Type ljor   olfm -> olfm -> olfm.
Type ljimp  olfm -> olfm -> olfm.

%% No units or quantifiers so far.

Define is_ljfm : olfm -> prop by
; is_ljfm (ljatom A)
; is_ljfm (ljand A B) := is_ljfm A /\ is_ljfm B
; is_ljfm (ljor A B) := is_ljfm A /\ is_ljfm B
; is_ljfm (ljimp A B) := is_ljfm A /\ is_ljfm B.

Import "cut-coherence" with is_olfm := is_ljfm.

Define lj : ljfm -> o by
; lft (ljimp A B) := tens (rgt A) (lft B)
; rgt (ljimp A B) := par (lft A) (rgt B).

