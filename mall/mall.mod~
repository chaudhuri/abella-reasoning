%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%%				      %%
%%       MALL specification in        %%
%%       Î»Prolog	      	      %%
%%				      %%
%%	 Leonardo Lima, 2015          %%
%%				      %%
%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

module mall.

%% list_ is the data structure used to handle contexts (multisets of formulas)
%% list_ A (list_ B (list_ C empty)) is equivalent to (A::B::C::nil)
memb_and_rest X (list_ X L) L.
memb_and_rest X (list_ Y L1) (list_ Y L2) :- memb_and_rest X L1 L2.

%% Splitting contexts 
%% For computationally expensive cases use Dale's another solution
split empty empty empty.
split (list_ X L1) L2 (list_ Y L3) :- split L1 L2 L3.

%% example: prove (list_ (plus (p a) (p b)) empty) (list_ (with (p a) (p b)) (list_ (p a) (list_ (p b) empty))).
%% example2: prove (list_ (tensor (p a) (p b)) empty) (list_ (par (p a) (p b)) empty).

%% Identity rules
prove Gamma Delta :- memb_and_rest A Gamma _,
      	    	     memb_and_rest A Delta _.				% init

%% TODO: How to specify the cut rule?

%% Multiplicative rules
prove Gamma Delta :- memb_and_rest one Gamma Gamma',
      	    	     prove Gamma' Delta.				% oneL

prove Gamma Delta :- memb_and_rest one Delta Delta',
      	    	     Gamma = empty, Delta' = empty.			% oneR

prove Gamma Delta :- memb_and_rest (tensor A B) Gamma Gamma',
      	    	     prove (list_ A (list_ B Gamma')) Delta.		% tensorL

prove Gamma Delta :- memb_and_rest (tensor A B) Delta Delta',
      	    	     split Delta' D1 D2, split Gamma G1 G2,
      	    	     prove G1 (list_ A D1), prove G2 (list_ B D2).	% tensorR

prove Gamma Delta :- memb_and_rest bot Gamma Gamma',
      	    	     Gamma' = empty, Delta = empty.			% botL

prove Gamma Delta :- memb_and_rest bot Delta Delta',
      	    	     prove Gamma Delta'.				% botR

prove Gamma Delta :- memb_and_rest (par A B) Gamma Gamma',
      	    	     split Gamma' G1 G2, split Delta D1 D2,
		     prove (list_ A G1) D1, prove (list_ B G2) D2.	% parL

prove Gamma Delta :- memb_and_rest (par A B) Delta Delta',
		     prove Gamma (list_ A (list_ B Delta')).		% parR

%% Additive rules
prove Gamma Delta :- memb_and_rest zero Gamma _.   			% zeroL

prove Gamma Delta :- memb_and_rest top Delta _. 			% topR

prove Gamma Delta :- memb_and_rest (with A B) Gamma Gamma',
      	    	     prove (list_ A Gamma') Delta.			% withL1

prove Gamma Delta :- memb_and_rest (with A B) Gamma Gamma',
      	    	     prove (list_ B Gamma') Delta.			% withL2

prove Gamma Delta :- memb_and_rest (with A B) Delta Delta',
      	    	     prove Gamma (list_ A Delta'),
		     prove Gamma (list_ B Delta').			% withR

prove Gamma Delta :- memb_and_rest (plus A B) Gamma Gamma',
      	    	     prove (list_ A Gamma') Delta,
		     prove (list_ B Gamma') Delta.			% plusL

prove Gamma Delta :- memb_and_rest (plus A B) Delta Delta',
      	    	     prove Gamma (list_ A Delta').			% plusR1

prove Gamma Delta :- memb_and_rest (plus A B) Delta Delta',
      	    	     prove Gamma (list_ B Delta').			% plusR2