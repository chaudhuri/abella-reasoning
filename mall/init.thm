%% Cut elimination for MALL

Specification "mall".

% More verbose output
Set instantiations on.
Set witnesses on.

%% Toy theorems for practicing.

Theorem empty_split: forall L,
  { split L empty empty } -> L = empty.

induction on 1.
intros.
case H1.
search.

Theorem plus_l: forall A B G D,
	({prove (list_o A G) D} /\
	{prove (list_o B G) D}) ->
	{prove (list_o (plus A B) G) D}.
	intros. case H1. unfold plusl.
	witness A. witness B. witness G.
	split. search. search. search.

Theorem tensor_r: forall A B,
	({prove (list_o A empty) (list_o A empty)} /\
	{prove (list_o B empty) (list_o B empty)}) ->
	{prove (list_o A (list_o B empty)) (list_o (tensor A B) empty)}.
	intros. case H1. unfold tensorr.
	witness A. witness B.
	witness empty. witness empty. witness empty.
	witness (list_o A empty). witness (list_o B empty).
	search. search. search. search.
	% Probably unfold (named clause) followed by witness (something) is not the right thing to do

%% Auxiliary definitions

Define formula: o -> prop by
  formula (tensor A B) := formula A /\ formula B ;
  formula (plus A B) := formula A /\ formula B ;
  formula (with A B) := formula A /\ formula B ;
  formula (par A B) := formula A /\ formula B ;
  formula (atom A).

%% Admissibility of non-atomic initials.

% Lemmas

Theorem init_tensor: forall A B,
  ( { prove (list_o A empty) (list_o A empty) } /\ 
    { prove (list_o B empty) (list_o B empty) } ) ->
  { prove (list_o (tensor A B) empty) (list_o (tensor A B) empty) }.

intros. case H1.
unfold tensorl.
  witness A. witness B. witness empty.
  split. 
    search.
    unfold tensorr.
      witness A. witness B. witness empty. witness empty. witness empty.
      witness (list_o A empty). witness (list_o B empty).
      split.
        search. search. search. search. search.

% Admissibility of non-atomic initial: main theorem

Theorem atomic_initial: forall A,
  formula A -> { prove (list_o A empty) (list_o A empty) }.

induction on 1. intros. case H1.
  apply IH to H2.
  apply IH to H3.
  apply init_tensor. search.
% TODO: finish this proof when we have the lemmas for all connectives.

%% Lemma 1: cut permutes up

%% G4 = G2 U G3; D4 = D2 U D3
% Theorem tensor_r_cut1 :
% 	forall A B C G2 G3 G4 D2 D3 D4,
% 	(
% 		{prove (list_o C G2) (list_o A D2)} /\ {prove G3 (list_o B D3)} /\ {split G2 G3 G4} /\ {split D2 D3 D4} ->
% 		{prove (list_o C G4) (list_o (tensor A B) D4)}
% 	). %intros. case H1.

%% G4 = G2 U G3; D4 = D2 U D3
%% G5 = G1 U G4; D5 = D1 U D4
% Theorem tensor_r_cut2 :	
% 	forall A B C G1 G2 G3 G4 G5 D1 D2 D3 D4 D5, 
% 	(
% 		(
% 		{prove (list_o C G2) (list_o A D2)} /\ {prove G3 (list_o B D3)} /\ {split G2 G3 G4} /\ {split D2 D3 D4} ->
% 		{prove (list_o C G4) (list_o (tensor A B) D4)}
% 		) /\ {prove G1 (list_o C D1)} /\ {split G1 G4 G5} /\ {split D1 D4 D5} ->
% 		{prove G5 (list_o (tensor A B) D5)}
% 	) ->
% 	(
% 	 	(
% 	 	{prove G2 (list_o C D2)} /\ {prove (list_o C G3) (list_o A D3)} /\ {split G2 G3 G4} /\ {split D2 D3 D4} ->
% 	 	{prove G4 (list_o A D4)}
% 	 	) /\ {prove G1 (list_o B D1)} /\ {split G1 G4 G5} /\ {split D1 D4 D5} ->
% 	 	{prove G5 (list_o (tensor A B) D5)}
% 	). %intros. case H2.
