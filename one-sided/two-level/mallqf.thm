Specification "mallq".

Set witnesses on.

Type form fm -> o.

Define is_fm : o -> prop by
; is_fm (form (atom A))
; is_fm (form (natom A))
; is_fm (form (tens A B)) := is_fm (form A) /\ is_fm (form B)
; is_fm (form one)
; is_fm (form (par A B)) := is_fm (form A) /\ is_fm (form B)
; is_fm (form bot)
; is_fm (form (wth A B)) := is_fm (form A) /\ is_fm (form B)
; is_fm (form top)
; is_fm (form (plus A B)) := is_fm (form A) /\ is_fm (form B)
; is_fm (form zero)
; is_fm (form (all A)) := nabla x, is_fm (form (A x))
; is_fm (form (exs A)) := nabla x, is_fm (form (A x))
.

Import "../../lib/merge" with is_o := is_fm.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
% List of list of formulas (o list list)

Type fmlist olist -> o.
Define is_fmlist : olist -> prop by
; is_fmlist nil
; is_fmlist (fmlist FL :: L) := is_list FL /\ is_fmlist L
.

% Cartesian product of fmlists
Define prod1 : olist -> olist -> olist -> prop by
; prod1 X nil nil
; prod1 X (fmlist FL :: L) (fmlist FLX :: LX) :=
    prod1 X L LX /\ merge X FL FLX
.

Define prod : olist -> olist -> olist -> prop by
; prod nil L L
; prod (fmlist FL :: L) J LJ' := exists LJ,
    prod L J LJ /\
    prod1 FL LJ LJ'
.

% flatten a list of fmlists into a list of forms.
Define flatten : olist -> olist -> prop by
; flatten nil nil
; flatten (fmlist H :: TL) L := exists F,
    flatten TL F /\ merge H F L.

% n-way merge
% First two are lists of fmlists
% Third one is a list of forms
Define mergeN : olist -> olist -> olist -> prop by
; mergeN L1 L2 L := exists F1 F2,
    flatten L1 F1 /\ flatten L2 F2 /\ merge F1 F2 L
.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Define is_pos : o -> prop by
; is_pos (form (atom A))
; is_pos (form (tens A B))
; is_pos (form one)
; is_pos (form (plus A B))
; is_pos (form zero)
; is_pos (form (exs A))
.

Define is_neg : o -> prop by
; is_neg (form (natom A))
; is_neg (form (wth A B))
; is_neg (form top)
; is_neg (form (par A B))
; is_neg (form bot)
; is_neg (form (all A))
.

Define is_neg_or_atom : o -> prop by
; is_neg_or_atom (form (atom A))
; is_neg_or_atom (form F) := is_neg (form F)
.

Define is_pos_or_atom : o -> prop by
; is_pos_or_atom (form (natom A))
; is_pos_or_atom (form F) := is_pos (form F)
.

%% pos_sub_f N L : N is a negative formula, L is a list of
%% fmlists containing the positive subformulas of N. If N were
%% to be decomposed in an async phase, each list in L is the
%% set of formulas in the open premises.
Define pos_sub_f : o -> olist -> prop by
; pos_sub_f (form (natom A)) nil
; pos_sub_f (form (wth A B)) L := exists LA LB,
    pos_sub_f (form A) LA /\
    pos_sub_f (form B) LB /\
    merge LA LB L
; pos_sub_f (form top) nil
; pos_sub_f (form (par A B)) L := exists LA LB,
    pos_sub_f (form A) LA /\
    pos_sub_f (form B) LB /\
    prod LA LB L
; pos_sub_f (form bot) nil
; pos_sub_f (form (all A)) L := nabla x,
    pos_sub_f (form (A x)) L
; pos_sub_f P (fmlist (P :: nil) :: nil) := is_pos P
.

%% neg_sub_f P L : P is a positive formula, L is a list of
%% forms containing the negative subformulas of P. If P were
%% to be decomposed in a sync phase, each form in L is the
%% set of formulas in the open premises.
Define neg_sub_f : o -> olist -> prop by
; neg_sub_f (form (atom A)) nil
; neg_sub_f (form (tens A B)) L := exists LA LB,
    neg_sub_f (form A) LA /\
    neg_sub_f (form B) LB /\
    merge LA LB L
; neg_sub_f (form one) nil
; neg_sub_f (form (plus A B)) L := 
    neg_sub_f (form A) L
; neg_sub_f (form (plus A B)) L :=
    neg_sub_f (form B ) L
; neg_sub_f (form zero) nil
; neg_sub_f (form (exs A)) L := nabla x,
    neg_sub_f (form (A x)) L
; neg_sub_f N (N :: nil) := is_neg N
.

Theorem dual_is : forall A B,
  { dual A B } -> is_fm (form A) /\ is_fm (form B).
induction on 1. intros. case H1.
  search.
  apply IH to *H2. apply IH to *H3. search.
  search.
  apply IH to *H2. apply IH to *H3. search.
  search.
  apply IH to *H2. search.

%% FYI: Abella cannot infer the type of A
Theorem is_fm_inst : forall (A : term -> o),
  nabla x, is_fm (A x) -> forall t, is_fm (A t).
induction on 1. intros. case H1.
  search.
  search.
  apply IH to H2. apply H4 with t = t.
    apply IH to H3. apply H6 with t = t.
    search.
  search.
  apply IH to H2. apply H4 with t = t.
    apply IH to H3. apply H6 with t = t.
    search.
  search.
  apply IH to H2. apply H4 with t = t.
    apply IH to H3. apply H6 with t = t.
    search.
  search.
  apply IH to H2. apply H4 with t = t.
    apply IH to H3. apply H6 with t = t.
    search.
  search.
  apply IH to H2 with A = (X\ form (A1 X n2)).
      apply H3 with t = t. search.
  apply IH to H2 with A = (X\ form (A1 X n2)).
    apply H3 with t = t. search.

Theorem is_list_inst : forall (L : term -> olist),
  nabla x, is_list (L x) -> forall t, is_list (L t).
induction on 1. intros. case H1.
  search.
  apply is_fm_inst to H2. apply H4 with t = t.
    apply IH to H3. apply H6 with t = t.
    search.

Theorem adj_inst : forall K A L,
  nabla (x : term), adj (K x) (A x) (L x) -> forall t, adj (K t) (A t) (L t).
induction on 1. intros. case H1.
  apply is_fm_inst to H2. apply H4 with t = t.
    apply is_list_inst to H3. apply H6 with t = t. search.
  apply is_fm_inst to H2. apply H4 with t = t.
    apply IH to H3. apply H6 with t = t. search. 

% Corollary:
% adj J (A x) (K x) -> adj J (A t) (K t)

Theorem merge_inst : forall J K L,
  nabla (x : term), merge (J x) (K x) (L x) -> forall t, merge (J t) (K t) (L t).
induction on 1. intros. case H1.
  search.
  apply adj_inst to H2. apply *H5 with t = t.
    apply adj_inst to H3. apply *H7 with t = t.
    apply IH to H4. apply *H9 with t = t.
    search.
  apply adj_inst to H2. apply *H5 with t = t.
    apply adj_inst to H3. apply *H7 with t = t.
    apply IH to H4. apply *H9 with t = t.
    search.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%
%% FOCUSED FIRST-ORDER MALL

% Two contexts are used to delay the application of synchronous rules
% (if only one context is used, we needed to reason on all formulas of
% the context before starting a focused phase).

% The working context can be processed in order during the async phase.

% By convention, all atoms have positive polarity (because of the way dual is defined).

Define 
  mall : olist -> olist -> prop,
  mallfoc : olist -> o -> prop
by
% Identity
; mallfoc (form (natom A) :: nil) (form (atom A))
% Decide
; mall G nil :=
    exists GG P, is_pos P /\ adj GG P G /\ mallfoc GG P
% Release
; mallfoc G F :=
    is_neg F /\ mall G (F :: nil)
% Store
; mall G (F :: L) :=
    exists GF, is_pos_or_atom F /\ adj G F GF /\ mall GF L
% ASYNCHRONOUS PHASE
; mall G (form bot :: L) :=
    mall G L
; mall G (form (par A B) :: L) :=
    mall G (form A :: form B :: L)
; mall G (form top :: L)
; mall G (form (wth A B) :: L) :=
    mall G (form A :: L) /\ mall G (form B :: L)
; mall G (form (all A) :: L) :=
    nabla x, mall G (form (A x) :: L)
% SYNCHRONOUS PHASE
; mallfoc nil (form one)
; mallfoc G (form (tens A B)) :=
    exists G1 G2, merge G1 G2 G /\ mallfoc G1 (form A) /\ mallfoc G2 (form B)
; mallfoc G (form (plus A B)) :=
    mallfoc G (form A)
; mallfoc G (form (plus A B)) :=
    mallfoc G (form B)
; mallfoc G (form (exs A)) :=
    exists x, mallfoc G (form (A x))
.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Theorem async_phase : forall G N Ps,
  mall G (N :: nil) -> is_neg N -> pos_sub_f N Ps ->
  forall P, member (fmlist P) Ps -> mall G P.
skip.

Theorem sync_phase : forall G Gs P Ns,
  mallfoc G P -> is_pos P -> neg_sub_f P Ns -> mergeN Gs nil G ->
  forall N, forall Gi, member N Ns -> member (fmlist Gi) Gs -> mallfoc Gi N.

Theorem generalized_id : forall A B,
  { dual A B } -> mall (form A :: nil) (form B :: nil).
induction on 1. intros. case H1.
  unfold 4. witness (form (natom A1) :: form (atom A1) :: nil). split.
    search.
    search.
    unfold 2. witness (form (natom A1) :: nil). witness (form (atom A1)). search.
  apply IH to H2. apply IH to H3. unfold 6. %% CANNOT STORE :(
    skip.
skip.
skip.
skip.
skip.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Theorem exchange_adm : forall L J,
  mall L nil -> perm L J -> mall J nil.
induction on 2. intros. case H2.
  search.
  skip.

%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%%

Theorem cut_elim : forall P N L J LJ,
  { dual P N } ->
  mallfoc L (form P) ->
  mallfoc J (form N) -> % First rule above this will be release.
  merge L J LJ ->
  mall LJ nil.
induction on 1. intros. case H1.
  % Atom
  case H2.
    % 1.1
    case H3. case H6.
    apply adj_implies_merge to H8. apply merge_sym to H10. apply merge_perm_det to H11 H4.
    apply exchange_adm to H9 H12. search.
    % 1.2
    case H5.
  % Tensor
  case H3. % release on the right branch.
  case H2.
    % 2.1
    case H7.
    % 2.2
    case H3. case H11.
      % 2.2.1
      case H12. case H15.
      % 2.2.2
      skip.
  % One
  case H2.
    case H5.
    case H3. case H6.
      case H7. case H10.
      apply merge_nil_perm to H4. apply exchange_adm to H7 H8. search.
  % Plus
  skip.
  % Zero
  case H2. case H5. case H7.
  % Exists
  skip.